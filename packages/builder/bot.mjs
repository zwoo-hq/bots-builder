var o=class{};var t=(e=>(e[e.None=0]="None",e[e.Red=1]="Red",e[e.Yellow=2]="Yellow",e[e.Blue=3]="Blue",e[e.Green=4]="Green",e[e.Black=5]="Black",e))(t||{}),a=(e=>(e[e.None=0]="None",e[e.Zero=1]="Zero",e[e.One=2]="One",e[e.Two=3]="Two",e[e.Three=4]="Three",e[e.Four=5]="Four",e[e.Five=6]="Five",e[e.Six=7]="Six",e[e.Seven=8]="Seven",e[e.Eight=9]="Eight",e[e.Nine=10]="Nine",e[e.Skip=11]="Skip",e[e.Reverse=12]="Reverse",e[e.DrawTwo=13]="DrawTwo",e[e.Wild=14]="Wild",e[e.WildFour=15]="WildFour",e))(a||{}),i=class{},n=class{},u=class{};var v=class{Type=0;Decision=0;constructor(r,s){}},o2=class{AggregateNotification(r){}Reset(){}GetState(){return{}}},w=class extends o2{GetOtherPlayers(){return{}}GetCurrentDraw(){}},T={};var MyBot=class extends o{triggerEvent=T.triggerEvent;state=new w;placedCard=-1;AggregateNotification(message){switch(T.logger.Info("Received message: "+message),message.Code){case ZRPCode.GameStarted:this.triggerEvent(ZRPCode.GetHand,new GetDeckEvent);break;case ZRPCode.GetPlayerDecision:T.logger.Info("making decision"),this.makeDecision(message.Payload);return;case ZRPCode.PlaceCardError:this.placeCard();return;default:this.state.AggregateNotification(message);break}var currentState=this.state.GetState();currentState.IsActive&&message.Code!=ZRPCode.StateUpdated&&(T.logger.Info("starting turn"),this.placedCard=-1,this.placeCard())}Reset(){T.logger.Info("Resetting bot")}placeCard(){if(T.random.Next(10)<1){this.triggerEvent(ZRPCode.DrawCard,new i);return}var state=this.state.GetState();if(this.placedCard=this.placedCard+1,this.placedCard>=state.Deck.Count){T.logger.Info("bailing with draw"),this.triggerEvent(ZRPCode.DrawCard,new i);return}try{this.triggerEvent(ZRPCode.PlaceCard,new n(T.helper.toInt(state.Deck[this.placedCard].Color),T.helper.toInt(state.Deck[this.placedCard].Type))),state.Deck.Count==2&&T.random.Next(10)>4&&this.triggerEvent(ZRPCode.RequestEndTurn,new u)}catch(ex){T.logger.Error("cant place card ["+this.placedCard+"]: "+ex)}}makeDecision(data){let decision=T.random.Next(data.Options.Count);this.triggerEvent(ZRPCode.ReceiveDecision,new v(data.Type,decision))}},main_default=MyBot;export{MyBot,main_default as default};
