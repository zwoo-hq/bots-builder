var a=class{};var r=class extends a{triggerEvent=globals.triggerEvent;state=new WholeGameBotStateManager;placedCard=-1;AggregateNotification(e){switch(globals.logger.Info("Received message: "+e),e.Code){case ZRPCode.GameStarted:this.triggerEvent(ZRPCode.GetHand,new GetDeckEvent);break;case ZRPCode.GetPlayerDecision:globals.logger.Info("making decision"),this.makeDecision(e.Payload);return;case ZRPCode.PlaceCardError:this.placeCard();return;default:this.state.AggregateNotification(e);break}var t=this.state.GetState();t.IsActive&&e.Code!=ZRPCode.StateUpdated&&(globals.logger.Info("starting turn"),this.placedCard=-1,this.placeCard())}Reset(){globals.logger.Info("Resetting bot")}placeCard(){if(globals.rand.Next(10)<1){this.triggerEvent(ZRPCode.DrawCard,new DrawCardEvent);return}var e=this.state.GetState();if(this.placedCard=this.placedCard+1,this.placedCard>=e.Deck.Count){globals.logger.Info("bailing with draw"),this.triggerEvent(ZRPCode.DrawCard,new DrawCardEvent);return}try{this.triggerEvent(ZRPCode.PlaceCard,new PlaceCardEvent(globals.toInt(e.Deck[this.placedCard].Color),globals.toInt(e.Deck[this.placedCard].Type))),e.Deck.Count==2&&globals.rand.Next(10)>4&&this.triggerEvent(ZRPCode.RequestEndTurn,new RequestEndTurnEvent)}catch(t){globals.logger.Error("cant place card ["+this.placedCard+"]: "+t)}}makeDecision(e){let t=globals.rand.Next(e.Options.Count);this.triggerEvent(ZRPCode.ReceiveDecision,new PlayerDecisionEvent(e.Type,t))}},l=r;export{r as MyBot,l as default};
